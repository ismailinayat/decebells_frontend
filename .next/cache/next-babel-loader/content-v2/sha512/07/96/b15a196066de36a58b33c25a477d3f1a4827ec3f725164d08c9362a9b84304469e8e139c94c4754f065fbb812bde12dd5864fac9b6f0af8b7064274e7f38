{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\decebells from scratch\\\\frontend\\\\pages\\\\shop\\\\product\\\\[id].js\";\nimport axios from 'axios';\nimport { useContext, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQuery } from 'react-query';\n\nconst fetchProduct = async id => {\n  try {\n    //console.log(JSON.parse(JSON.stringify(id)))\n    //const id = '600d3ac6fae8a4011feb0528';\n    //console.log(id)\n    const {\n      data\n    } = await axios.get(`http://localhost:3000/api/v1/products/${id}`);\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error.response.data.message);\n  } // Everytime we go to the product detail page, we are getting an error from the 'server' in the terminal console saying \n  // 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'\n\n};\n\nexport async function getServerSideProps(context) {\n  console.log(context.params.id); // Call an external API endpoint to get posts\n  //console.log(JSON.parse(JSON.stringify(id)))\n  //const id = '600d3ac6fae8a4011feb0528';\n\n  const product = await fetchProduct(context.params.id); // Previously I was calling 'fetchProduct' function in this 'getServerSideProps' without passing the 'id' to it which was giving some kind of\n  // serializing error saying `undefined` cannot be serialized as JSON'. The reason was that 'getServerSideProps' must return a valid json object\n  // but because we were not passing the id to the fetchProduct therefore we were not returning a valid json object. Now we call solve this problem \n  // by specifically saying something like props: {product: product || null} or using the spread operator on the 'product' that is saving the\n  // response coming from the 'fetchProduct' function. However we were still getting the error in our console from the 'catch' block of our \n  // 'fetchProduct' function and this was 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'.\n  // In short we needed to pass the 'id' of the product to fetchProduct when we were calling it in the 'getServerSideProps' function. It turns out\n  // that 'getServerSideProps' also gets access to something called 'context' and it contains many useful data including the 'params' which contains\n  // the url parameters. So used to to get the 'id' param and passed that to the 'fetchProduct' function.\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n\n  return {\n    props: product\n  };\n}\n\nfunction Product(props) {\n  const router = useRouter();\n  const {\n    id\n  } = router.query; //console.log(props.data)\n\n  const {\n    data,\n    status\n  } = useQuery('productDetail', () => fetchProduct(id), {\n    initialData: props.product\n  });\n  console.log(status); //if (data.data.status === 'success') {\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'black'\n      },\n      children: \"This is product detail page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 7\n  }, this); //}\n}\n\nexport default Product; //","map":{"version":3,"sources":["C:/Users/Admin/Desktop/decebells from scratch/frontend/pages/shop/product/[id].js"],"names":["axios","useContext","useEffect","useRouter","useQuery","fetchProduct","id","data","get","console","log","error","response","message","getServerSideProps","context","params","product","props","Product","router","query","status","initialData","color"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,EAAoBC,SAApB,QAAoC,OAApC;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,QAAR,QAAuB,aAAvB;;AAIA,MAAMC,YAAY,GAAG,MAAOC,EAAP,IAAc;AAEjC,MAAI;AACF;AACA;AACA;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMP,KAAK,CAACQ,GAAN,CAAW,yCAAwCF,EAAG,EAAtD,CAArB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,WAAOA,IAAP;AAED,GARD,CAQE,OAAOI,KAAP,EAAc;AAACF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM,OAAhC;AAAyC,GAVzB,CAUmD;AACA;;AACrF,CAZD;;AAcA,OAAO,eAAeC,kBAAf,CAAkCC,OAAlC,EAA2C;AAChDN,EAAAA,OAAO,CAACC,GAAR,CAAYK,OAAO,CAACC,MAAR,CAAeV,EAA3B,EADgD,CAEhD;AAEE;AACA;;AAKF,QAAMW,OAAO,GAAG,MAAMZ,YAAY,CAACU,OAAO,CAACC,MAAR,CAAeV,EAAhB,CAAlC,CAVgD,CAUY;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAE5D;AACA;;AACA,SAAO;AACLY,IAAAA,KAAK,EACHD;AAFG,GAAP;AAKD;;AAED,SAASE,OAAT,CAAiBD,KAAjB,EAAwB;AACtB,QAAME,MAAM,GAAGjB,SAAS,EAAxB;AAEA,QAAM;AAACG,IAAAA;AAAD,MAAOc,MAAM,CAACC,KAApB,CAHsB,CAMtB;;AAEA,QAAM;AAACd,IAAAA,IAAD;AAAOe,IAAAA;AAAP,MAAiBlB,QAAQ,CAAC,eAAD,EAAkB,MAAMC,YAAY,CAACC,EAAD,CAApC,EAA0C;AAACiB,IAAAA,WAAW,EAAEL,KAAK,CAACD;AAApB,GAA1C,CAA/B;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYY,MAAZ,EATsB,CAWtB;;AAEE,sBACE;AAAA,2BACE;AAAI,MAAA,KAAK,EAAE;AAACE,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,CAboB,CAkBtB;AAGD;;AAID,eAAeL,OAAf,C,CACA","sourcesContent":["\r\nimport axios from 'axios';\r\nimport {useContext, useEffect} from 'react';\r\nimport {useRouter} from 'next/router'\r\nimport {useQuery} from 'react-query';\r\n\r\n\r\n\r\nconst fetchProduct = async (id) => {\r\n  \r\n  try {\r\n    //console.log(JSON.parse(JSON.stringify(id)))\r\n    //const id = '600d3ac6fae8a4011feb0528';\r\n    //console.log(id)\r\n    const {data} = await axios.get(`http://localhost:3000/api/v1/products/${id}`);\r\n    console.log(data)\r\n    return data;\r\n\r\n  } catch (error) {console.log(error.response.data.message)}                          // Everytime we go to the product detail page, we are getting an error from the 'server' in the terminal console saying \r\n                                                                                      // 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  console.log(context.params.id)\r\n  // Call an external API endpoint to get posts\r\n\r\n    //console.log(JSON.parse(JSON.stringify(id)))\r\n    //const id = '600d3ac6fae8a4011feb0528';\r\n\r\n    \r\n\r\n  \r\n  const product = await fetchProduct(context.params.id)       // Previously I was calling 'fetchProduct' function in this 'getServerSideProps' without passing the 'id' to it which was giving some kind of\r\n                                                              // serializing error saying `undefined` cannot be serialized as JSON'. The reason was that 'getServerSideProps' must return a valid json object\r\n                                                              // but because we were not passing the id to the fetchProduct therefore we were not returning a valid json object. Now we call solve this problem \r\n                                                              // by specifically saying something like props: {product: product || null} or using the spread operator on the 'product' that is saving the\r\n                                                              // response coming from the 'fetchProduct' function. However we were still getting the error in our console from the 'catch' block of our \r\n                                                              // 'fetchProduct' function and this was 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'.\r\n                                                              \r\n                                                              // In short we needed to pass the 'id' of the product to fetchProduct when we were calling it in the 'getServerSideProps' function. It turns out\r\n                                                              // that 'getServerSideProps' also gets access to something called 'context' and it contains many useful data including the 'params' which contains\r\n                                                              // the url parameters. So used to to get the 'id' param and passed that to the 'fetchProduct' function.\r\n  \r\n  // By returning { props: { posts } }, the Blog component\r\n  // will receive `posts` as a prop at build time\r\n  return {\r\n    props: \r\n      product,\r\n    \r\n  }\r\n}\r\n\r\nfunction Product(props) {\r\n  const router = useRouter();\r\n\r\n  const {id} = router.query\r\n\r\n  \r\n  //console.log(props.data)\r\n\r\n  const {data, status} = useQuery('productDetail', () => fetchProduct(id), {initialData: props.product});\r\n  console.log(status)\r\n\r\n  //if (data.data.status === 'success') {\r\n\r\n    return(\r\n      <div >\r\n        <h1 style={{color:'black'}}>This is product detail page</h1>\r\n      </div>\r\n    )\r\n  //}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Product;\r\n//\r\n      \r\n"]},"metadata":{},"sourceType":"module"}