{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\decebells from scratch\\\\frontend\\\\pages\\\\shop\\\\product\\\\[id].js\";\nimport Image from 'next/image';\nimport axios from 'axios';\nimport { useState, useContext, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQuery } from 'react-query';\n\nconst fetchProduct = async id => {\n  try {\n    //console.log(JSON.parse(JSON.stringify(id)))\n    //const id = '600d3ac6fae8a4011feb0528';\n    //console.log(id)\n    const {\n      data\n    } = await axios.get(`http://localhost:3000/api/v1/products/${id}`); //console.log(data)\n\n    return data;\n  } catch (error) {\n    console.log(error.response.data.message);\n  } // Everytime we go to the product detail page, we are getting an error from the 'server' in the terminal console saying \n  // 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'\n\n};\n\nexport async function getServerSideProps(context) {\n  console.log(context.params.id); // Call an external API endpoint to get posts\n  //console.log(JSON.parse(JSON.stringify(id)))\n  //const id = '600d3ac6fae8a4011feb0528';\n\n  const product = await fetchProduct(context.params.id); // Previously I was calling 'fetchProduct' function in this 'getServerSideProps' without passing the 'id' to it which was giving some kind of\n  // serializing error saying `undefined` cannot be serialized as JSON'. The reason was that 'getServerSideProps' must return a valid json object\n  // but because we were not passing the id to the fetchProduct therefore we were not returning a valid json object. Now we call solve this problem \n  // by specifically saying something like props: {product: product || null} or using the spread operator on the 'product' that is saving the\n  // response coming from the 'fetchProduct' function. However we were still getting the error in our console from the 'catch' block of our \n  // 'fetchProduct' function and this was 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'.\n  // In short we needed to pass the 'id' of the product to fetchProduct when we were calling it in the 'getServerSideProps' function. It turns out\n  // that 'getServerSideProps' also gets access to something called 'context' and it contains many useful data including the 'params' which contains\n  // the url parameters. So used to to get the 'id' param and passed that to the 'fetchProduct' function.\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n\n  return {\n    props: product\n  };\n}\n\nfunction Product(props) {\n  const router = useRouter();\n  const {\n    0: qty,\n    1: setQty\n  } = useState('');\n\n  const addToCartHandler = function () {\n    console.log(qty);\n  };\n\n  const handleInputQty = function (e) {\n    setQty(() => e.target.value);\n  };\n\n  const {\n    id\n  } = router.query;\n  const {\n    data,\n    status\n  } = useQuery('productDetail', () => fetchProduct(id), {\n    initialData: props.product\n  });\n\n  if (status === 'success') {\n    var productDetail = data.data.product;\n  }\n\n  if (productDetail) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: 'black',\n          width: '500px'\n        },\n        children: productDetail.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        className: \"main__image\",\n        width: 500,\n        height: 500,\n        src: `/images/${productDetail.sku}-main image.jpg`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            color: 'black'\n          },\n          htmlFor: \"qty\",\n          children: \"Qty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: handleInputQty,\n          name: \"qty\",\n          value: qty\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addToCartHandler,\n        children: \"Add To Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  } else {\n    return null;\n  } //  }\n  //}\n\n}\n\nexport default Product; //\n\n/*\r\n<h1 style={{color:'black', width: '500px'}}>{product.title}</h1>\r\n<Image className='main__image' width={500} height={500} src={`/images/${product.sku}-main image.jpg`}></Image>\r\n          <form>\r\n            <label for='qty'>Qty</label>\r\n            <input type='number' name='qty' onChange={handleInputQty} value={qty}></input>\r\n          </form>\r\n          <button onClick={addToCartHandler}>Add To Cart</button>*/","map":{"version":3,"sources":["C:/Users/Admin/Desktop/decebells from scratch/frontend/pages/shop/product/[id].js"],"names":["Image","axios","useState","useContext","useEffect","useRouter","useQuery","fetchProduct","id","data","get","error","console","log","response","message","getServerSideProps","context","params","product","props","Product","router","qty","setQty","addToCartHandler","handleInputQty","e","target","value","query","status","initialData","productDetail","color","width","title","sku"],"mappings":"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","sourcesContent":["import Image from 'next/image';\r\nimport axios from 'axios';\r\nimport {useState, useContext, useEffect} from 'react';\r\nimport {useRouter} from 'next/router';\r\nimport {useQuery} from 'react-query';\r\n\r\n\r\n\r\nconst fetchProduct = async (id) => {\r\n  \r\n  try {\r\n    //console.log(JSON.parse(JSON.stringify(id)))\r\n    //const id = '600d3ac6fae8a4011feb0528';\r\n    //console.log(id)\r\n    const {data} = await axios.get(`http://localhost:3000/api/v1/products/${id}`);\r\n    //console.log(data)\r\n    return data;\r\n\r\n  } catch (error) {console.log(error.response.data.message)}                          // Everytime we go to the product detail page, we are getting an error from the 'server' in the terminal console saying \r\n                                                                                      // 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  console.log(context.params.id)\r\n  // Call an external API endpoint to get posts\r\n\r\n    //console.log(JSON.parse(JSON.stringify(id)))\r\n    //const id = '600d3ac6fae8a4011feb0528';\r\n\r\n    \r\n\r\n  \r\n  const product = await fetchProduct(context.params.id)       // Previously I was calling 'fetchProduct' function in this 'getServerSideProps' without passing the 'id' to it which was giving some kind of\r\n                                                              // serializing error saying `undefined` cannot be serialized as JSON'. The reason was that 'getServerSideProps' must return a valid json object\r\n                                                              // but because we were not passing the id to the fetchProduct therefore we were not returning a valid json object. Now we call solve this problem \r\n                                                              // by specifically saying something like props: {product: product || null} or using the spread operator on the 'product' that is saving the\r\n                                                              // response coming from the 'fetchProduct' function. However we were still getting the error in our console from the 'catch' block of our \r\n                                                              // 'fetchProduct' function and this was 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'.\r\n                                                              \r\n                                                              // In short we needed to pass the 'id' of the product to fetchProduct when we were calling it in the 'getServerSideProps' function. It turns out\r\n                                                              // that 'getServerSideProps' also gets access to something called 'context' and it contains many useful data including the 'params' which contains\r\n                                                              // the url parameters. So used to to get the 'id' param and passed that to the 'fetchProduct' function.\r\n  \r\n  // By returning { props: { posts } }, the Blog component\r\n  // will receive `posts` as a prop at build time\r\n  return {\r\n    props: \r\n      product,\r\n    \r\n  }\r\n}\r\n\r\nfunction Product(props) {\r\n  const router = useRouter();\r\n\r\n  const [qty, setQty] = useState('')\r\n\r\n  const addToCartHandler = function () {\r\n    console.log(qty);\r\n  }\r\n\r\n  const handleInputQty = function (e) {\r\n    setQty(() => e.target.value)\r\n  }\r\n\r\n\r\n  const {id} = router.query;\r\n  const {data , status} = useQuery('productDetail', () => fetchProduct(id), {initialData: props.product});\r\n\r\n  if (status === 'success') {\r\n\r\n    var productDetail = data.data.product\r\n  }\r\n\r\n  if (productDetail) {\r\n\r\n    return(\r\n      <div >\r\n        <h1 style={{color:'black', width: '500px'}}>{productDetail.title}</h1>\r\n        <Image className='main__image' width={500} height={500} src={`/images/${productDetail.sku}-main image.jpg`}></Image>\r\n          <form>\r\n            <label style={{color: 'black'}} htmlFor='qty'>Qty</label>\r\n            <input type='number' onChange={handleInputQty} name='qty' value={qty}></input>\r\n          </form>\r\n          <button onClick={addToCartHandler}>Add To Cart</button>\r\n        \r\n      </div>\r\n    )\r\n  } else {return null}\r\n  //  }\r\n  //}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Product;\r\n//\r\n      \r\n/*\r\n<h1 style={{color:'black', width: '500px'}}>{product.title}</h1>\r\n<Image className='main__image' width={500} height={500} src={`/images/${product.sku}-main image.jpg`}></Image>\r\n          <form>\r\n            <label for='qty'>Qty</label>\r\n            <input type='number' name='qty' onChange={handleInputQty} value={qty}></input>\r\n          </form>\r\n          <button onClick={addToCartHandler}>Add To Cart</button>*/"]},"metadata":{},"sourceType":"module"}