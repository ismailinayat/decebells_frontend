{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mohammad Ismail\\\\Desktop\\\\decebells from scratch\\\\frontend\\\\pages\\\\shop\\\\product\\\\[id].js\";\nimport Image from 'next/image';\nimport axios from 'axios';\nimport { useState, useContext, useEffect } from 'react';\nimport { CartContext } from '../../../contexts/CartContext';\nimport { useRouter } from 'next/router';\nimport { useQuery } from 'react-query';\nimport DetailCarousel from '../../../components/detailCaraousel';\n\nconst fetchProduct = async id => {\n  try {\n    //console.log(JSON.parse(JSON.stringify(id)))\n    //const id = '600d3ac6fae8a4011feb0528';\n    //console.log(id)\n    const {\n      data\n    } = await axios.get(`http://localhost:5000/api/v1/products/${id}`); //console.log(data)\n\n    return data;\n  } catch (error) {\n    console.log(error.response.data.message);\n  } // Everytime we go to the product detail page, we are getting an error from the 'server' in the terminal console saying \n  // 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'\n\n};\n\nexport async function getServerSideProps(context) {\n  // Call an external API endpoint to get posts\n  const product = await fetchProduct(context.params.id); // Previously I was calling 'fetchProduct' function in this 'getServerSideProps' without passing the 'id' to it which was giving some kind of\n  // serializing error saying `undefined` cannot be serialized as JSON'. The reason was that 'getServerSideProps' must return a valid json object\n  // but because we were not passing the id to the fetchProduct therefore we were not returning a valid json object. Now we call solve this problem \n  // by specifically saying something like props: {product: product || null} or using the spread operator on the 'product' that is saving the\n  // response coming from the 'fetchProduct' function. However we were still getting the error in our console from the 'catch' block of our \n  // 'fetchProduct' function and this was 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'.\n  // In short we needed to pass the 'id' of the product to fetchProduct when we were calling it in the 'getServerSideProps' function. It turns out\n  // that 'getServerSideProps' also gets access to something called 'context' and it contains many useful data including the 'params' which contains\n  // the url parameters. So used to to get the 'id' param and passed that to the 'fetchProduct' function.\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n\n  return {\n    props: product\n  };\n}\n\nfunction Product(props) {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    cartItems,\n    setCartItems\n  } = useContext(CartContext);\n  const {\n    0: qty,\n    1: setQty\n  } = useState('1');\n\n  function handleQtyChange(e) {\n    setQty(e.target.value);\n  }\n\n  const addToCartHandler = function () {\n    const newCartItem = {\n      id: id,\n      name: productDetail.title,\n      image: productDetail.price,\n      qty,\n      qty\n    };\n    const itemExists = cartItems.find(item => item.id === id);\n\n    if (itemExists) {\n      setCartItems(cartItems.map(item => item.id === itemExists.id ? newCartItem : item)); //localStorage.setItem('cart', JSON.stringify(cartItems))\n    } else {\n      setCartItems([...cartItems, newCartItem]); //localStorage.setItem('cart', JSON.stringify(cartItems))\n    }\n  };\n\n  useEffect(() => {\n    const cartDataFromLocalStorage = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : [];\n\n    if (cartDataFromLocalStorage) {\n      setCartItems(cartDataFromLocalStorage);\n    }\n  }, []);\n  useEffect(() => {\n    //console.log(`LocalStorage: ${localStorage.getItem('cart')}`)\n    //console.log(`context: ${cartItems}`)\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  });\n\n  const handleInputQty = function (e) {\n    setQty(() => e.target.value);\n  };\n\n  const {\n    data,\n    status\n  } = useQuery('productDetail', () => fetchProduct(id), {\n    initialData: props.product\n  });\n\n  if (status === 'success') {\n    var productDetail = data.data.product;\n  }\n\n  if (productDetail) {\n    //console.log(productDetail)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detail__screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detail__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"detail__header--left\",\n          children: /*#__PURE__*/_jsxDEV(DetailCarousel, {\n            images: productDetail.images,\n            sku: productDetail.sku\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"detail__header--right\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              color: 'black'\n            },\n            children: productDetail.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"quantity\",\n            style: {\n              color: 'black'\n            },\n            children: \"Quantity: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"quantity\",\n            value: qty,\n            onChange: handleQtyChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  } else {\n    return null;\n  }\n}\n\nexport default Product;\n/*\r\n<Image className='main__image' width={500} height={500} src={`/images/${productDetail.sku}-main image.jpg`}></Image>\r\n          <form>\r\n            <label style={{color: 'black'}} htmlFor='qty'>Qty</label>\r\n            <input type='number' onChange={handleInputQty} name='qty' value={qty}></input>\r\n          </form>\r\n          <button onClick={addToCartHandler}>Add To Cart</button>\r\n          */","map":{"version":3,"sources":["C:/Users/Mohammad Ismail/Desktop/decebells from scratch/frontend/pages/shop/product/[id].js"],"names":["Image","axios","useState","useContext","useEffect","CartContext","useRouter","useQuery","DetailCarousel","fetchProduct","id","data","get","error","console","log","response","message","getServerSideProps","context","product","params","props","Product","router","query","cartItems","setCartItems","qty","setQty","handleQtyChange","e","target","value","addToCartHandler","newCartItem","name","productDetail","title","image","price","itemExists","find","item","map","cartDataFromLocalStorage","localStorage","getItem","JSON","parse","setItem","stringify","handleInputQty","status","initialData","images","sku","color"],"mappings":"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","sourcesContent":["import Image from 'next/image';\r\nimport axios from 'axios';\r\nimport {useState, useContext, useEffect} from 'react';\r\nimport {CartContext} from '../../../contexts/CartContext'\r\nimport {useRouter} from 'next/router';\r\nimport {useQuery} from 'react-query';\r\n\r\nimport DetailCarousel from '../../../components/detailCaraousel';\r\n\r\n\r\n\r\nconst fetchProduct = async (id) => {\r\n  \r\n  try {\r\n    //console.log(JSON.parse(JSON.stringify(id)))\r\n    //const id = '600d3ac6fae8a4011feb0528';\r\n    //console.log(id)\r\n    const {data} = await axios.get(`http://localhost:5000/api/v1/products/${id}`);\r\n    //console.log(data)\r\n    return data;\r\n\r\n  } catch (error) {console.log(error.response.data.message)}                          // Everytime we go to the product detail page, we are getting an error from the 'server' in the terminal console saying \r\n                                                                                      // 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n\r\n  // Call an external API endpoint to get posts\r\n\r\n\r\n\r\n  \r\n  const product = await fetchProduct(context.params.id)       // Previously I was calling 'fetchProduct' function in this 'getServerSideProps' without passing the 'id' to it which was giving some kind of\r\n                                                              // serializing error saying `undefined` cannot be serialized as JSON'. The reason was that 'getServerSideProps' must return a valid json object\r\n                                                              // but because we were not passing the id to the fetchProduct therefore we were not returning a valid json object. Now we call solve this problem \r\n                                                              // by specifically saying something like props: {product: product || null} or using the spread operator on the 'product' that is saving the\r\n                                                              // response coming from the 'fetchProduct' function. However we were still getting the error in our console from the 'catch' block of our \r\n                                                              // 'fetchProduct' function and this was 'Cast to ObjectId failed for value 'undefined' at path \"_id\" for model \"product\"'.\r\n                                                              \r\n                                                              // In short we needed to pass the 'id' of the product to fetchProduct when we were calling it in the 'getServerSideProps' function. It turns out\r\n                                                              // that 'getServerSideProps' also gets access to something called 'context' and it contains many useful data including the 'params' which contains\r\n                                                              // the url parameters. So used to to get the 'id' param and passed that to the 'fetchProduct' function.\r\n  \r\n  // By returning { props: { posts } }, the Blog component\r\n  // will receive `posts` as a prop at build time\r\n  return {\r\n    props: \r\n      product,\r\n    \r\n  }\r\n}\r\n\r\n\r\n\r\nfunction Product(props) {\r\n  const router = useRouter();\r\n  const {id} = router.query;\r\n  \r\n\r\n  const {cartItems, setCartItems} = useContext(CartContext)\r\n  \r\n  const [qty, setQty] = useState('1')\r\n\r\n  function handleQtyChange(e) {\r\n    setQty(e.target.value)\r\n  }\r\n\r\n  const addToCartHandler = function () {\r\n\r\n    const newCartItem = {\r\n      id: id,\r\n      name: productDetail.title,\r\n      image: productDetail.price,\r\n      qty, qty\r\n    }\r\n\r\n    const itemExists = cartItems.find(item => item.id === id)\r\n\r\n    if (itemExists) {\r\n      \r\n      setCartItems(cartItems.map(item => item.id === itemExists.id ? newCartItem : item))\r\n      \r\n      //localStorage.setItem('cart', JSON.stringify(cartItems))\r\n      \r\n    }  else {\r\n      \r\n      setCartItems([...cartItems, newCartItem])\r\n       \r\n      //localStorage.setItem('cart', JSON.stringify(cartItems))\r\n     \r\n    }\r\n\r\n    \r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    const cartDataFromLocalStorage = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')): [];\r\n    if (cartDataFromLocalStorage) {\r\n      setCartItems(cartDataFromLocalStorage)\r\n    }\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    //console.log(`LocalStorage: ${localStorage.getItem('cart')}`)\r\n    //console.log(`context: ${cartItems}`)\r\n    localStorage.setItem('cart', JSON.stringify(cartItems))\r\n  })\r\n\r\n  const handleInputQty = function (e) {\r\n    setQty(() => e.target.value)\r\n  }\r\n\r\n\r\n  \r\n  const {data , status} = useQuery('productDetail', () => fetchProduct(id), {initialData: props.product});\r\n\r\n  if (status === 'success') {\r\n\r\n    var productDetail = data.data.product\r\n  }\r\n\r\n  if (productDetail) {\r\n    //console.log(productDetail)\r\n\r\n    return(\r\n      <div className='detail__screen'>\r\n\r\n        <div className=\"detail__header\">\r\n          <div className=\"detail__header--left\">\r\n            <DetailCarousel images={productDetail.images} sku={productDetail.sku}/>\r\n          </div>\r\n\r\n          <div className=\"detail__header--right\">\r\n            <h1 style={{color:'black'}}>{productDetail.title}</h1>\r\n\r\n            <label htmlFor=\"quantity\" style={{color: 'black'}}>Quantity: </label>\r\n            <input type=\"number\" name='quantity' value={qty} onChange={handleQtyChange}/>\r\n          </div>\r\n        </div>\r\n        \r\n        \r\n        \r\n        \r\n      </div>\r\n    )\r\n  } else {return null}\r\n\r\n}\r\n\r\n\r\n\r\nexport default Product;\r\n/*\r\n<Image className='main__image' width={500} height={500} src={`/images/${productDetail.sku}-main image.jpg`}></Image>\r\n          <form>\r\n            <label style={{color: 'black'}} htmlFor='qty'>Qty</label>\r\n            <input type='number' onChange={handleInputQty} name='qty' value={qty}></input>\r\n          </form>\r\n          <button onClick={addToCartHandler}>Add To Cart</button>\r\n          */"]},"metadata":{},"sourceType":"module"}