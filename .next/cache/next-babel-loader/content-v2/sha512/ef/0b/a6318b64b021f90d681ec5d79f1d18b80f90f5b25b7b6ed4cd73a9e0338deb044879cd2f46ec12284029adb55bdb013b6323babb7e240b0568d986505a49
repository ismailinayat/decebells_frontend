{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport axios from 'axios';\nconst providers = [Providers.Credentials({\n  name: 'Credentials',\n  authorize: async credentials => {\n    const user = await axios.post('http://localhost:3000/api/v1/users/login', {\n      user: {\n        password: credentials.password,\n        email: credentials.email\n      }\n    }, {\n      headers: {\n        accept: '*/*',\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (user) {\n      return user;\n    } else {\n      return null;\n    }\n  }\n})];\nconst callbacks = {\n  async signIn(user, account, profile) {\n    return true;\n  },\n\n  // Getting the JWT token from API response\n  async jwt(token, user) {\n    if (user) {\n      token.accessToken = user.token;\n    }\n\n    return token;\n  },\n\n  async session(session, token) {\n    session.accessToken = token.accessToken;\n    return session;\n  }\n\n};\nconst options = {\n  providers,\n  callbacks\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["C:/Users/Admin/Desktop/decebells from scratch/frontend/pages/api/[...nextauth].js"],"names":["NextAuth","Providers","axios","providers","Credentials","name","authorize","credentials","user","post","password","email","headers","accept","callbacks","signIn","account","profile","jwt","token","accessToken","session","options","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG,CAChBF,SAAS,CAACG,WAAV,CAAsB;AACpBC,EAAAA,IAAI,EAAE,aADc;AAEpBC,EAAAA,SAAS,EAAE,MAAOC,WAAP,IAAuB;AAChC,UAAMC,IAAI,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAW,0CAAX,EACjB;AACED,MAAAA,IAAI,EAAE;AACJE,QAAAA,QAAQ,EAAEH,WAAW,CAACG,QADlB;AAEJC,QAAAA,KAAK,EAAEJ,WAAW,CAACI;AAFf;AADR,KADiB,EAOjB;AACEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,KADD;AAEP,wBAAgB;AAFT;AADX,KAPiB,CAAnB;;AAcA,QAAIL,IAAJ,EAAU;AACR,aAAOA,IAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF;AAtBmB,CAAtB,CADgB,CAAlB;AA2BA,MAAMM,SAAS,GAAG;AAChB,QAAMC,MAAN,CAAaP,IAAb,EAAmBQ,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,WAAO,IAAP;AACD,GAHe;;AAKhB;AACA,QAAMC,GAAN,CAAUC,KAAV,EAAiBX,IAAjB,EAAuB;AACrB,QAAIA,IAAJ,EAAU;AACRW,MAAAA,KAAK,CAACC,WAAN,GAAoBZ,IAAI,CAACW,KAAzB;AACD;;AAED,WAAOA,KAAP;AACD,GAZe;;AAchB,QAAME,OAAN,CAAcA,OAAd,EAAuBF,KAAvB,EAA8B;AAC5BE,IAAAA,OAAO,CAACD,WAAR,GAAsBD,KAAK,CAACC,WAA5B;AACA,WAAOC,OAAP;AACD;;AAjBe,CAAlB;AAoBA,MAAMC,OAAO,GAAG;AACdnB,EAAAA,SADc;AAEdW,EAAAA;AAFc,CAAhB;AAKA,gBAAe,CAACS,GAAD,EAAMC,GAAN,KAAcxB,QAAQ,CAACuB,GAAD,EAAMC,GAAN,EAAWF,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth'\r\nimport Providers from 'next-auth/providers'\r\nimport axios from 'axios'\r\n\r\nconst providers = [\r\n  Providers.Credentials({\r\n    name: 'Credentials',\r\n    authorize: async (credentials) => {\r\n      const user = await axios.post('http://localhost:3000/api/v1/users/login',\r\n        {\r\n          user: {\r\n            password: credentials.password,\r\n            email: credentials.email\r\n          }\r\n        },\r\n        {\r\n          headers: {\r\n            accept: '*/*',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n\r\n      if (user) {\r\n        return user\r\n      } else {\r\n        return null\r\n      }\r\n    }\r\n  })\r\n]\r\n\r\nconst callbacks = {\r\n  async signIn(user, account, profile) {\r\n    return true\r\n  },\r\n\r\n  // Getting the JWT token from API response\r\n  async jwt(token, user) {\r\n    if (user) {\r\n      token.accessToken = user.token\r\n    }\r\n\r\n    return token\r\n  },\r\n\r\n  async session(session, token) {\r\n    session.accessToken = token.accessToken\r\n    return session\r\n  }\r\n}\r\n\r\nconst options = {\r\n  providers,\r\n  callbacks\r\n}\r\n\r\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}