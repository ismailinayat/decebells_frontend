{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport axios from 'axios';\nconst providers = [Providers.Credentials({\n  name: 'Credentials',\n  authorize: async credentials => {\n    try {\n      const user = await axios.post('http://localhost:3000/api/v1/users/login', {\n        user: {\n          password: credentials.password,\n          email: credentials.email\n        }\n      }, {\n        headers: {\n          accept: '*/*',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (user) {\n        return {\n          status: 'success',\n          data: user\n        };\n      }\n    } catch (e) {\n      const errorMessage = e.response.data.message; // Redirecting to the login page with error messsage          in the URL\n\n      throw new Error(errorMessage + '&email=' + credentials.email);\n    }\n  }\n})];\nconst callbacks = {\n  async signIn(user, account, profile) {\n    return true;\n  },\n\n  async jwt(token, user) {\n    if (user) {\n      token.accessToken = user.data.token;\n    }\n\n    return token;\n  },\n\n  async session(session, token) {\n    session.accessToken = token.accessToken;\n    return session;\n  }\n\n};\nconst options = {\n  providers,\n  callbacks,\n  pages: {\n    error: '/login' // Changing the error redirect page to our custom login page\n\n  }\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["C:/Users/Admin/Desktop/decebells from scratch/frontend/pages/api/[...nextauth].js"],"names":["NextAuth","Providers","axios","providers","Credentials","name","authorize","credentials","user","post","password","email","headers","accept","status","data","e","errorMessage","response","message","Error","callbacks","signIn","account","profile","jwt","token","accessToken","session","options","pages","error","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG,CAChBF,SAAS,CAACG,WAAV,CAAsB;AACpBC,EAAAA,IAAI,EAAE,aADc;AAEpBC,EAAAA,SAAS,EAAE,MAAOC,WAAP,IAAuB;AAChC,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAW,0CAAX,EACnB;AACED,QAAAA,IAAI,EAAE;AACJE,UAAAA,QAAQ,EAAEH,WAAW,CAACG,QADlB;AAEJC,UAAAA,KAAK,EAAEJ,WAAW,CAACI;AAFf;AADR,OADmB,EAOnB;AACEC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,KADD;AAEP,0BAAgB;AAFT;AADX,OAPmB,CAAnB;;AAcA,UAAIL,IAAJ,EAAU;AACR,eAAO;AAACM,UAAAA,MAAM,EAAE,SAAT;AAAoBC,UAAAA,IAAI,EAAEP;AAA1B,SAAP;AACD;AACF,KAlBD,CAkBE,OAAOQ,CAAP,EAAU;AACV,YAAMC,YAAY,GAAGD,CAAC,CAACE,QAAF,CAAWH,IAAX,CAAgBI,OAArC,CADU,CAEV;;AACA,YAAM,IAAIC,KAAJ,CAAUH,YAAY,GAAG,SAAf,GAA2BV,WAAW,CAACI,KAAjD,CAAN;AACD;AAEF;AA3BmB,CAAtB,CADgB,CAAlB;AAgCA,MAAMU,SAAS,GAAG;AAChB,QAAMC,MAAN,CAAad,IAAb,EAAmBe,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,WAAO,IAAP;AACD,GAHe;;AAKhB,QAAMC,GAAN,CAAUC,KAAV,EAAiBlB,IAAjB,EAAuB;AACrB,QAAIA,IAAJ,EAAU;AACRkB,MAAAA,KAAK,CAACC,WAAN,GAAoBnB,IAAI,CAACO,IAAL,CAAUW,KAA9B;AACD;;AAED,WAAOA,KAAP;AACD,GAXe;;AAahB,QAAME,OAAN,CAAcA,OAAd,EAAuBF,KAAvB,EAA8B;AAC5BE,IAAAA,OAAO,CAACD,WAAR,GAAsBD,KAAK,CAACC,WAA5B;AACA,WAAOC,OAAP;AACD;;AAhBe,CAAlB;AAmBA,MAAMC,OAAO,GAAG;AACd1B,EAAAA,SADc;AAEdkB,EAAAA,SAFc;AAGdS,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,QADF,CACW;;AADX;AAHO,CAAhB;AAQA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAcjC,QAAQ,CAACgC,GAAD,EAAMC,GAAN,EAAWJ,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth'\r\nimport Providers from 'next-auth/providers'\r\nimport axios from 'axios'\r\n\r\nconst providers = [\r\n  Providers.Credentials({\r\n    name: 'Credentials',\r\n    authorize: async (credentials) => {\r\n      try {\r\n        const user = await axios.post('http://localhost:3000/api/v1/users/login',\r\n        {\r\n          user: {\r\n            password: credentials.password,\r\n            email: credentials.email\r\n          }\r\n        },\r\n        {\r\n          headers: {\r\n            accept: '*/*',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n\r\n        if (user) {\r\n          return {status: 'success', data: user}\r\n        } \r\n      } catch (e) {\r\n        const errorMessage = e.response.data.message\r\n        // Redirecting to the login page with error messsage          in the URL\r\n        throw new Error(errorMessage + '&email=' + credentials.email)\r\n      }\r\n\r\n    }\r\n  })\r\n]\r\n\r\nconst callbacks = {\r\n  async signIn(user, account, profile) {\r\n    return true\r\n  },\r\n\r\n  async jwt(token, user) {\r\n    if (user) {\r\n      token.accessToken = user.data.token\r\n    }\r\n\r\n    return token\r\n  },\r\n\r\n  async session(session, token) {\r\n    session.accessToken = token.accessToken\r\n    return session\r\n  }\r\n}\r\n\r\nconst options = {\r\n  providers,\r\n  callbacks,\r\n  pages: {\r\n    error: '/login' // Changing the error redirect page to our custom login page\r\n  }\r\n}\r\n\r\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}